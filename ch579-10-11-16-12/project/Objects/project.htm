<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Aug 21 15:52:43 2024
<BR><P>
<H3>Maximum Stack Usage =       1000 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tcp_recv_back &rArr; TCP_recv_date_handle &rArr; tcp_recv_server_time_back_data &rArr; db_init &rArr; fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
 <LI><a href="#[6f]">CH57xScokedIntHandle</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98]">tcp_close</a><BR>
 <LI><a href="#[11b]">rbRead</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11b]">rbRead</a><BR>
 <LI><a href="#[f4]">rbWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f4]">rbWrite</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[e]">BB_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4d]">CH57xNET_DHCPCallBack</a> from net_dhcp.o(i.CH57xNET_DHCPCallBack) referenced from net_dhcp.o(i.net_dhcp_while)
 <LI><a href="#[28]">CH57xSocketTCPReceive</a> from ch57xsock.o(i.CH57xSocketTCPReceive) referenced from ch57xsock.o(i.LwipTcpConnectedCallBack)
 <LI><a href="#[27]">CH57xTCPError</a> from ch57xsock.o(i.CH57xTCPError) referenced from ch57xsock.o(i.CH57xNET_SocketCreat)
 <LI><a href="#[11]">ETH_IRQHandler</a> from net_init.o(i.ETH_IRQHandler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[b]">GPIO_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[19]">LED_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[f]">LLE_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2a]">LwipTCPPollCallBack</a> from ch57xsock.o(i.LwipTCPPollCallBack) referenced from ch57xsock.o(i.LwipTcpConnectedCallBack)
 <LI><a href="#[29]">LwipTCPSendCallBack</a> from ch57xsock.o(i.LwipTCPSendCallBack) referenced from ch57xsock.o(i.LwipTcpConnectedCallBack)
 <LI><a href="#[24]">LwipTcpConnectedCallBack</a> from ch57xsock.o(i.LwipTcpConnectedCallBack) referenced from ch57xsock.o(i.CH57xNET_SocketConnect)
 <LI><a href="#[5]">NMI_Handler</a> from ch57x_int.o(i.NMI_Handler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[c]">SLAVE_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[d]">SPI0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[25]">SocketIPRAWReceive</a> from ch57xsock.o(i.SocketIPRAWReceive) referenced from ch57xsock.o(i.CH57xNET_SocketCreat)
 <LI><a href="#[26]">SocketUdpReceive</a> from ch57xsock.o(i.SocketUdpReceive) referenced from ch57xsock.o(i.CH57xNET_SocketCreat)
 <LI><a href="#[2b]">StartTask01</a> from main.o(i.StartTask01) referenced from main.o(i.MX_FREERTOS_Init)
 <LI><a href="#[2c]">StartTask02</a> from main.o(i.StartTask02) referenced from main.o(i.MX_FREERTOS_Init)
 <LI><a href="#[2d]">StartTask03</a> from main.o(i.StartTask03) referenced from main.o(i.MX_FREERTOS_Init)
 <LI><a href="#[9]">SysTick_Handler</a> from sys_tick.o(i.SysTick_Handler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from ch57x_clk.o(i.SystemInit) referenced from startup_armcm0.o(.text)
 <LI><a href="#[a]">TMR0_IRQHandler</a> from time.o(i.TMR0_IRQHandler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[12]">TMR1_IRQHandler</a> from time.o(i.TMR1_IRQHandler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[13]">TMR2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1a]">TMR3_IRQHandler</a> from time.o(i.TMR3_IRQHandler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[14]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[15]">UART1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1b]">UART2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1c]">UART3_IRQHandler</a> from uart.o(i.UART3_IRQHandler) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[10]">USB_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1d]">WDT_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[32]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[37]">alloc_kv_cb</a> from fdb_kvdb.o(i.alloc_kv_cb) referenced from fdb_kvdb.o(i.alloc_kv)
 <LI><a href="#[34]">check_and_recovery_gc_cb</a> from fdb_kvdb.o(i.check_and_recovery_gc_cb) referenced from fdb_kvdb.o(i._fdb_kv_load)
 <LI><a href="#[35]">check_and_recovery_kv_cb</a> from fdb_kvdb.o(i.check_and_recovery_kv_cb) referenced from fdb_kvdb.o(i._fdb_kv_load)
 <LI><a href="#[44]">check_oldest_addr_cb</a> from fdb_kvdb.o(i.check_oldest_addr_cb) referenced from fdb_kvdb.o(i.fdb_kvdb_init)
 <LI><a href="#[33]">check_sec_hdr_cb</a> from fdb_kvdb.o(i.check_sec_hdr_cb) referenced from fdb_kvdb.o(i._fdb_kv_load)
 <LI><a href="#[45]">check_sec_hdr_cb</a> from fdb_tsdb.o(i.check_sec_hdr_cb) referenced from fdb_tsdb.o(i.fdb_tsdb_init)
 <LI><a href="#[23]">dhcp_arp_reply</a> from ch57xnet_dhcp.o(i.dhcp_arp_reply) referenced from ch57xnet_dhcp.o(i.CH57xNET_DHCPStart)
 <LI><a href="#[30]">dhcp_callback</a> from tcp_data.o(i.dhcp_callback) referenced from main.o(i.StartTask01)
 <LI><a href="#[22]">dhcp_coarse_tmr</a> from ch57xnet_dhcp.o(i.dhcp_coarse_tmr) referenced from ch57xnet_dhcp.o(i.CH57xNET_DHCPStart)
 <LI><a href="#[21]">dhcp_fine_tmr</a> from ch57xnet_dhcp.o(i.dhcp_fine_tmr) referenced from ch57xnet_dhcp.o(i.CH57xNET_DHCPStart)
 <LI><a href="#[41]">dhcp_recv</a> from ch57xnet_dhcp.o(i.dhcp_recv) referenced from ch57xnet_dhcp.o(i.dhcp_start)
 <LI><a href="#[4c]">do_gc</a> from fdb_kvdb.o(i.do_gc) referenced from fdb_kvdb.o(i.gc_collect_by_free_size)
 <LI><a href="#[3]">erase</a> from fal_flash_sfud_port.o(i.erase) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[42]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[2e]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from ethernetif.o(i.SetupNetif)
 <LI><a href="#[2f]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from ethernetif.o(i.SetupNetif)
 <LI><a href="#[4a]">find_kv_cb</a> from fdb_kvdb.o(i.find_kv_cb) referenced from fdb_kvdb.o(i.find_kv_no_cache)
 <LI><a href="#[54]">format_all_cb</a> from fdb_tsdb.o(i.format_all_cb) referenced from fdb_tsdb.o(i.tsl_format_all)
 <LI><a href="#[31]">fputc</a> from ch57x_sys.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4b]">gc_check_cb</a> from fdb_kvdb.o(i.gc_check_cb) referenced from fdb_kvdb.o(i.gc_collect_by_free_size)
 <LI><a href="#[48]">get_last_sector_addr</a> from fdb_tsdb.o(i.get_last_sector_addr) referenced from fdb_tsdb.o(i.fdb_tsl_iter_by_time)
 <LI><a href="#[49]">get_last_tsl_addr</a> from fdb_tsdb.o(i.get_last_tsl_addr) referenced from fdb_tsdb.o(i.fdb_tsl_iter_by_time)
 <LI><a href="#[46]">get_next_sector_addr</a> from fdb_tsdb.o(i.get_next_sector_addr) referenced from fdb_tsdb.o(i.fdb_tsl_iter_by_time)
 <LI><a href="#[47]">get_next_tsl_addr</a> from fdb_tsdb.o(i.get_next_tsl_addr) referenced from fdb_tsdb.o(i.fdb_tsl_iter_by_time)
 <LI><a href="#[3a]">get_time</a> from db.o(i.get_time) referenced from db.o(i.db_init)
 <LI><a href="#[0]">init</a> from fal_flash_sfud_port.o(i.init) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[38]">lock</a> from db.o(i.lock) referenced from db.o(i.db_init)
 <LI><a href="#[43]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[1e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[55]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[3d]">query_by_time_cb</a> from db.o(i.query_by_time_cb) referenced from db.o(i.db_set_current_tsl_status)
 <LI><a href="#[53]">query_cb1</a> from db.o(i.query_cb1) referenced from db.o(i.tsdb_iterator)
 <LI><a href="#[1]">read</a> from fal_flash_sfud_port.o(i.read) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[36]">sector_statistics_cb</a> from fdb_kvdb.o(i.sector_statistics_cb) referenced from fdb_kvdb.o(i.alloc_kv)
 <LI><a href="#[3c]">send_all_data_cb</a> from send_tcp.o(i.send_all_data_cb) referenced from db.o(i.db_query_send)
 <LI><a href="#[3b]">send_not_upload_data_cb</a> from send_tcp.o(i.send_not_upload_data_cb) referenced from db.o(i.db_query_send)
 <LI><a href="#[50]">spi_lock</a> from sfud_port.o(i.spi_lock) referenced from sfud_port.o(i.sfud_spi_port_init)
 <LI><a href="#[51]">spi_unlock</a> from sfud_port.o(i.spi_unlock) referenced from sfud_port.o(i.sfud_spi_port_init)
 <LI><a href="#[4f]">spi_write_read</a> from sfud_port.o(i.spi_write_read) referenced from sfud_port.o(i.sfud_spi_port_init)
 <LI><a href="#[40]">tcp_connected_back</a> from tcp_data.o(i.tcp_connected_back) referenced from tcp_data.o(i.dhcp_callback)
 <LI><a href="#[3f]">tcp_disconnected_back</a> from tcp_data.o(i.tcp_disconnected_back) referenced from tcp_data.o(i.dhcp_callback)
 <LI><a href="#[3e]">tcp_recv_back</a> from tcp_data.o(i.tcp_recv_back) referenced from tcp_data.o(i.dhcp_callback)
 <LI><a href="#[52]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[39]">unlock</a> from db.o(i.unlock) referenced from db.o(i.db_init)
 <LI><a href="#[2]">write</a> from fal_flash_sfud_port.o(i.write) referenced 2 times from fal_flash_sfud_port.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[56]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[23e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[23f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[240]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[58]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[241]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[242]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[238]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[239]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[23b]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LED_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LLE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SLAVE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[243]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTimeFromUnixSecond
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_BaudRateCfg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRateCfg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeekFromDate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnixSecond
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysClock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_InitTime
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTimeFromUnixSecond
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_test_node_data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_import_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_delete_data
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_CreatUdpSocket
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_import_delete_date
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketUdpSendTo
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketRecv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPCallBack
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupNetif
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdpSend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRawSend
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xSocketTCPReceive
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter_by_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_all_data_cb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xSocketInit
</UL>

<P><STRONG><a name="[245]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[246]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_register_server
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_creat_socket
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_CreatUdpSocket
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPStop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPStart
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPHandle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipRemoveTcpPcb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xSocketInit
</UL>

<P><STRONG><a name="[248]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1d9]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>

<P><STRONG><a name="[14b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_cb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[19f]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
</UL>

<P><STRONG><a name="[198]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[19b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_cb
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_cb1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckTmr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdpReceive
</UL>

<P><STRONG><a name="[249]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckTmr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckParaInit
</UL>

<P><STRONG><a name="[24b]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[24e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[24f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[250]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[251]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[65]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[252]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>CH57xFileCorrectTCBPcb</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ch57xsock.o(i.CH57xFileCorrectTCBPcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CH57xFileCorrectTCBPcb
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipRemoveTcpPcb
</UL>

<P><STRONG><a name="[6e]"></a>CH57xIPSetSocketRecvInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ch57xsock.o(i.CH57xIPSetSocketRecvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH57xIPSetSocketRecvInit &rArr; CH57xScokedIntHandle &rArr;  tcp_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xScokedIntHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_MainTask
</UL>

<P><STRONG><a name="[be]"></a>CH57xMACRxSuccHandle</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, ethernetif.o(i.CH57xMACRxSuccHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH57xMACRxSuccHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQ_Deal
</UL>

<P><STRONG><a name="[1dd]"></a>CH57xNET_ConfigKeepLive</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57xsock.o(i.CH57xNET_ConfigKeepLive))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initkeeplive
</UL>

<P><STRONG><a name="[8b]"></a>CH57xNET_ConfigLIB</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch57xsock.o(i.CH57xNET_ConfigLIB))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_LibInit
</UL>

<P><STRONG><a name="[70]"></a>CH57xNET_CreatUdpSocket</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, udp_net.o(i.CH57xNET_CreatUdpSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = CH57xNET_CreatUdpSocket &rArr; CH57xNET_SocketCreat &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mStopIfError
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_callback1
</UL>

<P><STRONG><a name="[4d]"></a>CH57xNET_DHCPCallBack</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, net_dhcp.o(i.CH57xNET_DHCPCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH57xNET_DHCPCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_dhcp.o(i.net_dhcp_while)
</UL>
<P><STRONG><a name="[76]"></a>CH57xNET_DHCPHandle</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ch57xnet_dhcp.o(i.CH57xNET_DHCPHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH57xNET_DHCPHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[77]"></a>CH57xNET_DHCPStart</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ch57xnet_dhcp.o(i.CH57xNET_DHCPStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = CH57xNET_DHCPStart &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_while
</UL>

<P><STRONG><a name="[7a]"></a>CH57xNET_DHCPStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ch57xnet_dhcp.o(i.CH57xNET_DHCPStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CH57xNET_DHCPStop &rArr; dhcp_stop &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_while
</UL>

<P><STRONG><a name="[7c]"></a>CH57xNET_ETHIsr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ch57xsock.o(i.CH57xNET_ETHIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CH57xNET_ETHIsr &rArr; ETH_IRQ_Deal &rArr; CH57xMACRxSuccHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQ_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>CH57xNET_GetGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ch57xsock.o(i.CH57xNET_GetGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CH57xNET_GetGlobalInt &rArr; CH57xNET_QueryGlobalInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_QueryGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_HandleGlobalInt
</UL>

<P><STRONG><a name="[81]"></a>CH57xNET_GetPHYStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ch57xsock.o(i.CH57xNET_GetPHYStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_TimeIsr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_HandleGlobalInt
</UL>

<P><STRONG><a name="[82]"></a>CH57xNET_GetSocketInt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch57xsock.o(i.CH57xNET_GetSocketInt))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_HandleGlobalInt
</UL>

<P><STRONG><a name="[8a]"></a>CH57xNET_GetVer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ch57xsock.o(i.CH57xNET_GetVer))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_LibInit
</UL>

<P><STRONG><a name="[80]"></a>CH57xNET_HandleGlobalInt</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, net_tcp_client.o(i.CH57xNET_HandleGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = CH57xNET_HandleGlobalInt &rArr; net_tcp_client_data &rArr; Hub_register_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_GetSocketInt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_GetPHYStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_GetGlobalInt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_data
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask01
</UL>

<P><STRONG><a name="[85]"></a>CH57xNET_Init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ch57xsock.o(i.CH57xNET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = CH57xNET_Init &rArr; SetupNetif &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupNetif
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCH57xMAC
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xSocketInit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_LibInit
</UL>

<P><STRONG><a name="[89]"></a>CH57xNET_LibInit</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, net_init.o(i.CH57xNET_LibInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = CH57xNET_LibInit &rArr; CH57xNET_Init &rArr; SetupNetif &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_GetVer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_ConfigLIB
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_initkeeplive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[8d]"></a>CH57xNET_MainTask</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ch57xsock.o(i.CH57xNET_MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTimeWaiTCP
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaryEthRxDma
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIPPeriodicHandle
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xIPSetSocketRecvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask01
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketTcpSend
</UL>

<P><STRONG><a name="[7f]"></a>CH57xNET_QueryGlobalInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ch57xsock.o(i.CH57xNET_QueryGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CH57xNET_QueryGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask01
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_GetGlobalInt
</UL>

<P><STRONG><a name="[92]"></a>CH57xNET_SocketClose</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ch57xsock.o(i.CH57xNET_SocketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = CH57xNET_SocketClose &rArr; CloseTcpPCB &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUpdConnect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTcpPCB
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIPRAWConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_reconnect
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_close
</UL>

<P><STRONG><a name="[96]"></a>CH57xNET_SocketConnect</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ch57xsock.o(i.CH57xNET_SocketConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = CH57xNET_SocketConnect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_connect
</UL>

<P><STRONG><a name="[74]"></a>CH57xNET_SocketCreat</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, ch57xsock.o(i.CH57xNET_SocketCreat))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = CH57xNET_SocketCreat &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xSocketInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_creat_socket
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_CreatUdpSocket
</UL>

<P><STRONG><a name="[a8]"></a>CH57xNET_SocketRecv</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, ch57xsock.o(i.CH57xNET_SocketRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = CH57xNET_SocketRecv &rArr; tcp_recved_socket &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved_socket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemShortCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_data
</UL>

<P><STRONG><a name="[1df]"></a>CH57xNET_SocketRecvLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch57xsock.o(i.CH57xNET_SocketRecvLen))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_data
</UL>

<P><STRONG><a name="[ab]"></a>CH57xNET_SocketSend</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ch57xsock.o(i.CH57xNET_SocketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdpSend
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketTcpSend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRawSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_send
</UL>

<P><STRONG><a name="[1de]"></a>CH57xNET_SocketSetKeepLive</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ch57xsock.o(i.CH57xNET_SocketSetKeepLive))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_creat_socket
</UL>

<P><STRONG><a name="[af]"></a>CH57xNET_SocketUdpSendTo</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, ch57xsock.o(i.CH57xNET_SocketUdpSendTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = CH57xNET_SocketUdpSendTo &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xScokedIntHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
</UL>

<P><STRONG><a name="[b3]"></a>CH57xNET_TimeIsr</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ch57xsock.o(i.CH57xNET_TimeIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CH57xNET_TimeIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_GetPHYStatus
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_change
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>CH57xScokedIntHandle</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ch57xsock.o(i.CH57xScokedIntHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = CH57xScokedIntHandle &rArr;  tcp_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketUdpSendTo
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRawSend
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipTcpConnectedCallBack
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipRemoveTcpPcb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xIPSetSocketRecvInit
</UL>

<P><STRONG><a name="[86]"></a>CH57xSocketInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ch57xsock.o(i.CH57xSocketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CH57xSocketInit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_Init
</UL>

<P><STRONG><a name="[28]"></a>CH57xSocketTCPReceive</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, ch57xsock.o(i.CH57xSocketTCPReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = CH57xSocketTCPReceive &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved_CH57x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xsock.o(i.LwipTcpConnectedCallBack)
</UL>
<P><STRONG><a name="[27]"></a>CH57xTCPError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch57xsock.o(i.CH57xTCPError))
<BR>[Address Reference Count : 1]<UL><LI> ch57xsock.o(i.CH57xNET_SocketCreat)
</UL>
<P><STRONG><a name="[95]"></a>CloseIPRAWConnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ch57xsock.o(i.CloseIPRAWConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CloseIPRAWConnect &rArr; raw_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketClose
</UL>

<P><STRONG><a name="[94]"></a>CloseTcpPCB</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ch57xsock.o(i.CloseTcpPCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = CloseTcpPCB &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketClose
</UL>

<P><STRONG><a name="[93]"></a>CloseUpdConnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ch57xsock.o(i.CloseUpdConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CloseUpdConnect &rArr; udp_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketClose
</UL>

<P><STRONG><a name="[ba]"></a>DHCP_UDP_TCP_LINK_Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, net_tcp_client.o(i.DHCP_UDP_TCP_LINK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = DHCP_UDP_TCP_LINK_Init &rArr; CH57xNET_HandleGlobalInt &rArr; net_tcp_client_data &rArr; Hub_register_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_while
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_QueryGlobalInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_MainTask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_HandleGlobalInt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_callback1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketUdpSendTo
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>ETHInit</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, eth.o(i.ETHInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETHInit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCH57xMAC
</UL>

<P><STRONG><a name="[1cd]"></a>ETHRec</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, eth.o(i.ETHRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETHRec
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[1ce]"></a>ETHSend</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, eth.o(i.ETHSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETHSend
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[11]"></a>ETH_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_init.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ETH_IRQHandler &rArr; CH57xNET_ETHIsr &rArr; ETH_IRQ_Deal &rArr; CH57xMACRxSuccHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_ETHIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ETH_IRQ_Deal</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, eth.o(i.ETH_IRQ_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ETH_IRQ_Deal &rArr; CH57xMACRxSuccHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xMACRxSuccHandle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPHYReg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_ETHIsr
</UL>

<P><STRONG><a name="[79]"></a>ErrorEncode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ch57xsock.o(i.ErrorEncode))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketUdpSendTo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketConnect
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketClose
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdpSend
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketTcpSend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRawSend
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTcpPCB
</UL>

<P><STRONG><a name="[c1]"></a>GPIOA_ModeCfg</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, ch57x_gpio.o(i.GPIOA_ModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOA_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[c3]"></a>GPIOB_ModeCfg</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, ch57x_gpio.o(i.GPIOB_ModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOB_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[234]"></a>GPIOPinRemap</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ch57x_gpio.o(i.GPIOPinRemap))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c4]"></a>GetDateTimeFromUnixSecond</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, timswitch.o(i.GetDateTimeFromUnixSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GetDateTimeFromUnixSecond &rArr; GetWeekFromDate &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeekFromDate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
</UL>

<P><STRONG><a name="[c7]"></a>GetMACAddress</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ch57x_flash.o(i.GetMACAddress))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_register_server
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMacAddr
</UL>

<P><STRONG><a name="[c6]"></a>GetMacAddr</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, net_init.o(i.GetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetMacAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMACAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[c8]"></a>GetSysClock</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ch57x_clk.o(i.GetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetSysClock &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_BaudRateCfg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRateCfg
</UL>

<P><STRONG><a name="[c9]"></a>GetUnixSecond</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, timswitch.o(i.GetUnixSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GetUnixSecond &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_tim_switch_sec
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind_set
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[c5]"></a>GetWeekFromDate</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, timswitch.o(i.GetWeekFromDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GetWeekFromDate &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTimeFromUnixSecond
</UL>

<P><STRONG><a name="[ca]"></a>Hub_Beat_server</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, send_tcp.o(i.Hub_Beat_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = Hub_Beat_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>Hub_GetTime_server</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, send_tcp.o(i.Hub_GetTime_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = Hub_GetTime_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_register_back_data
</UL>

<P><STRONG><a name="[cf]"></a>Hub_register_server</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, send_tcp.o(i.Hub_register_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = Hub_register_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMACAddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_data
</UL>

<P><STRONG><a name="[c0]"></a>IPCheckParaInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ipcheck.o(i.IPCheckParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IPCheckParaInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckTmr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPConflictHandle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQ_Deal
</UL>

<P><STRONG><a name="[d1]"></a>IPCheckTmr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipcheck.o(i.IPCheckTmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IPCheckTmr &rArr; SelIPARPSend &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelIPARPSend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckParaInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIPPeriodicHandle
</UL>

<P><STRONG><a name="[d4]"></a>IPConflictHandle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipcheck.o(i.IPConflictHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IPConflictHandle &rArr; IPCheckParaInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[87]"></a>InitCH57xMAC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal.o(i.InitCH57xMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitCH57xMAC &rArr; ETHInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_Init
</UL>

<P><STRONG><a name="[d6]"></a>KEY_Scan</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEY_Scan &rArr; mDelaymS &rArr; mDelayuS
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[f8]"></a>LClk32K_Select</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ch57x_clk.o(i.LClk32K_Select))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Int
</UL>

<P><STRONG><a name="[d7]"></a>LORA_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart.o(i.LORA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LORA_Init &rArr; uart_send_byte_it &rArr; PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte_it
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>LoRa_SendData</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, uart.o(i.LoRa_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRa_SendData &rArr; uart_send_byte_it &rArr; PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte_it
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbind_set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind_set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_test_node_data
</UL>

<P><STRONG><a name="[da]"></a>Lora_Data_Upload_Server</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, send_tcp.o(i.Lora_Data_Upload_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = Lora_Data_Upload_Server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_tim_switch_sec
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_current_tsl_status
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_append_log
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yntohs
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
</UL>

<P><STRONG><a name="[df]"></a>Lora_Delete_Link_Net</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lora_link.o(i.Lora_Delete_Link_Net))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = Lora_Delete_Link_Net &rArr; node_auto_link &rArr; server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net
</UL>

<P><STRONG><a name="[e1]"></a>Lora_Link_Net</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lora_link.o(i.Lora_Link_Net))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = Lora_Link_Net &rArr; Lora_Link_Net_Faild &rArr; node_auto_link &rArr; server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net_Start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net_Faild
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net_Success
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Delete_Link_Net
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[e4]"></a>Lora_Link_Net_Faild</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lora_link.o(i.Lora_Link_Net_Faild))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = Lora_Link_Net_Faild &rArr; node_auto_link &rArr; server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net
</UL>

<P><STRONG><a name="[e2]"></a>Lora_Link_Net_Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lora_link.o(i.Lora_Link_Net_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lora_Link_Net_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net
</UL>

<P><STRONG><a name="[e3]"></a>Lora_Link_Net_Success</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lora_link.o(i.Lora_Link_Net_Success))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = Lora_Link_Net_Success &rArr; node_auto_link &rArr; server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net
</UL>

<P><STRONG><a name="[91]"></a>LwIPPeriodicHandle</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ethernetif.o(i.LwIPPeriodicHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckTmr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_MainTask
</UL>

<P><STRONG><a name="[195]"></a>LwipArpCheck</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ch57xsock.o(i.LwipArpCheck))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[e8]"></a>LwipRemoveTcpPcb</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ch57xsock.o(i.LwipRemoveTcpPcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LwipRemoveTcpPcb &rArr; CH57xScokedIntHandle &rArr;  tcp_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xScokedIntHandle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xFileCorrectTCBPcb
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTimeWaiTCP
</UL>

<P><STRONG><a name="[2a]"></a>LwipTCPPollCallBack</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ch57xsock.o(i.LwipTCPPollCallBack))
<BR>[Address Reference Count : 1]<UL><LI> ch57xsock.o(i.LwipTcpConnectedCallBack)
</UL>
<P><STRONG><a name="[29]"></a>LwipTCPSendCallBack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ch57xsock.o(i.LwipTCPSendCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LwipTCPSendCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xsock.o(i.LwipTcpConnectedCallBack)
</UL>
<P><STRONG><a name="[24]"></a>LwipTcpConnectedCallBack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ch57xsock.o(i.LwipTcpConnectedCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LwipTcpConnectedCallBack &rArr; CH57xScokedIntHandle &rArr;  tcp_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xScokedIntHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xsock.o(i.CH57xNET_SocketConnect)
</UL>
<P><STRONG><a name="[1ba]"></a>LwipUnreachPort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ch57xsock.o(i.LwipUnreachPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LwipUnreachPort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[ed]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_FREERTOS_Init &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>MemShortCopy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch57xsock.o(i.MemShortCopy))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketRecv
</UL>

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, ch57x_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1d1]"></a>PWR_UnitModCfg</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, ch57x_pwr.o(i.PWR_UnitModCfg))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>PowerMonitor</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ch57x_pwr.o(i.PowerMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerMonitor &rArr; mDelayuS
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f2]"></a>PrintTime</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, timswitch.o(i.PrintTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PrintTime &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
</UL>

<P><STRONG><a name="[f3]"></a>PutData</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, looplist.o(i.PutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte_it
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>QuaryEthRxDma</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ethernetif.o(i.QuaryEthRxDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QuaryEthRxDma &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_MainTask
</UL>

<P><STRONG><a name="[1bb]"></a>QueryPingEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ch57xsock.o(i.QueryPingEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[1d7]"></a>RTC_ClearITFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ch57x_clk.o(i.RTC_ClearITFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>RTC_GetTime</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, ch57x_clk.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RTC_GetTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_tim_switch_sec
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
</UL>

<P><STRONG><a name="[f6]"></a>RTC_InitTime</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, ch57x_clk.o(i.RTC_InitTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RTC_InitTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
</UL>

<P><STRONG><a name="[f7]"></a>RTC_Int</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(i.RTC_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TMRFunCfg
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCycle32k
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LClk32K_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
</UL>

<P><STRONG><a name="[f9]"></a>RTC_SetCycle32k</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ch57x_clk.o(i.RTC_SetCycle32k))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Int
</UL>

<P><STRONG><a name="[fa]"></a>RTC_TMRFunCfg</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ch57x_clk.o(i.RTC_TMRFunCfg))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Int
</UL>

<P><STRONG><a name="[bf]"></a>ReadPHYReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eth.o(i.ReadPHYReg))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQ_Deal
</UL>

<P><STRONG><a name="[8e]"></a>RemoveTimeWaiTCP</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tcp.o(i.RemoveTimeWaiTCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RemoveTimeWaiTCP &rArr; tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipRemoveTcpPcb
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_MainTask
</UL>

<P><STRONG><a name="[209]"></a>SPI1_CLKCfg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ch57x_spi1.o(i.SPI1_CLKCfg))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[208]"></a>SPI1_DataMode</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ch57x_spi1.o(i.SPI1_DataMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[207]"></a>SPI1_MasterDefInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ch57x_spi1.o(i.SPI1_MasterDefInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[20c]"></a>SPI1_MasterRecv</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ch57x_spi1.o(i.SPI1_MasterRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_MasterRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[20b]"></a>SPI1_MasterTrans</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ch57x_spi1.o(i.SPI1_MasterTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_MasterTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>SYS_ResetExecute</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ch57x_sys.o(i.SYS_ResetExecute))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
</UL>

<P><STRONG><a name="[d3]"></a>SelIPARPSend</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ipcheck.o(i.SelIPARPSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SelIPARPSend &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCheckTmr
</UL>

<P><STRONG><a name="[88]"></a>SetupNetif</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ethernetif.o(i.SetupNetif))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = SetupNetif &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_Init
</UL>

<P><STRONG><a name="[25]"></a>SocketIPRAWReceive</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ch57xsock.o(i.SocketIPRAWReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SocketIPRAWReceive &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xsock.o(i.CH57xNET_SocketCreat)
</UL>
<P><STRONG><a name="[ac]"></a>SocketIPRawSend</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, ch57xsock.o(i.SocketIPRawSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SocketIPRawSend &rArr; raw_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xScokedIntHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketSend
</UL>

<P><STRONG><a name="[ae]"></a>SocketTcpSend</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ch57xsock.o(i.SocketTcpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_MainTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketSend
</UL>

<P><STRONG><a name="[26]"></a>SocketUdpReceive</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, ch57xsock.o(i.SocketUdpReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SocketUdpReceive &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xsock.o(i.CH57xNET_SocketCreat)
</UL>
<P><STRONG><a name="[ad]"></a>SocketUdpSend</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, ch57xsock.o(i.SocketUdpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = SocketUdpSend &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEncode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketSend
</UL>

<P><STRONG><a name="[2b]"></a>StartTask01</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.StartTask01))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = StartTask01 &rArr; CH57xNET_HandleGlobalInt &rArr; net_tcp_client_data &rArr; Hub_register_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_connect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_while
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_QueryGlobalInt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_MainTask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_HandleGlobalInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[2c]"></a>StartTask02</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.StartTask02))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = StartTask02 &rArr; uart_data &rArr; db_add_mac &rArr; fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[2d]"></a>StartTask03</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.StartTask03))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = StartTask03 &rArr; Lora_Link_Net &rArr; Lora_Link_Net_Faild &rArr; node_auto_link &rArr; server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_tick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ch57x_clk.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; PowerMonitor &rArr; mDelayuS
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>TCP_recv_date_handle</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, tcp_data.o(i.TCP_recv_date_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = TCP_recv_date_handle &rArr; tcp_recv_server_time_back_data &rArr; db_init &rArr; fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_updata_back_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_test_node_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_register_back_data
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_beat_back_data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_import_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_delete_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_Query_send_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_Node_Query_data
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_back
</UL>

<P><STRONG><a name="[a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, time.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR0_IRQHandler &rArr; CH57xNET_TimeIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_TimeIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[22b]"></a>TMR0_TimerInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_timer0.o(i.TMR0_TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time0_init
</UL>

<P><STRONG><a name="[12]"></a>TMR1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, time.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = TMR1_IRQHandler &rArr; Hub_Beat_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_Beat_server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[22d]"></a>TMR1_TimerInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_timer1.o(i.TMR1_TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
</UL>

<P><STRONG><a name="[1a]"></a>TMR3_IRQHandler</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, time.o(i.TMR3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMR3_IRQHandler &rArr; bind_set &rArr; LoRa_SendData &rArr; uart_send_byte_it &rArr; PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbind_set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[22f]"></a>TMR3_TimerInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_timer3.o(i.TMR3_TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time3_init
</UL>

<P><STRONG><a name="[118]"></a>UART0_BaudRateCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ch57x_uart0.o(i.UART0_BaudRateCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART0_BaudRateCfg &rArr; GetSysClock &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysClock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DefInit
</UL>

<P><STRONG><a name="[119]"></a>UART0_DefInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ch57x_uart0.o(i.UART0_DefInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART0_DefInit &rArr; UART0_BaudRateCfg &rArr; GetSysClock &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRateCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11c]"></a>UART0_INTCfg</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ch57x_uart0.o(i.UART0_INTCfg))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte_it
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[14]"></a>UART0_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_IRQHandler &rArr; PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTCfg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>UART3_BaudRateCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ch57x_uart3.o(i.UART3_BaudRateCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART3_BaudRateCfg &rArr; GetSysClock &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysClock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DefInit
</UL>

<P><STRONG><a name="[11e]"></a>UART3_DefInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ch57x_uart3.o(i.UART3_DefInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART3_DefInit &rArr; UART3_BaudRateCfg &rArr; GetSysClock &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_BaudRateCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11f]"></a>UART3_INTCfg</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ch57x_uart3.o(i.UART3_INTCfg))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte_it
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1c]"></a>UART3_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART3_IRQHandler &rArr; PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_INTCfg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Yntohs</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, send_tcp.o(i.Yntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Yntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_cb1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
</UL>

<P><STRONG><a name="[120]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[254]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[71]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_Beat_server
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_connect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_dhcp_while
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_callback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_HandleGlobalInt
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter_by_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_append
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_control
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_control
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_del
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsdb_iterator
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_cb1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_by_time_cb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_updata_back_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_test_node_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_register_back_data
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_beat_back_data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_import_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_delete_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_Query_send_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_Node_Query_data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_creat_socket
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_CreatUdpSocket
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_disconnected_back
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connected_back
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_callback1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_delete_mac
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_add_mac
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_append_log
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test_back_date
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_import_delete_date
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_all_data_cb
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_register_server
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_GetTime_server
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mStopIfError
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPCallBack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_finish
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_format_all
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_append
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect_by_free_size
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuaryEthRxDma
</UL>

<P><STRONG><a name="[255]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[256]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[122]"></a>__0vsnprintf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[257]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[258]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[259]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[206]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
</UL>

<P><STRONG><a name="[6d]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c2]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_ModeCfg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_ModeCfg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_control
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[25a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[25b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[25c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[123]"></a>_fdb_continue_ff_addr</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, fdb_utils.o(i._fdb_continue_ff_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _fdb_continue_ff_addr &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
</UL>

<P><STRONG><a name="[12f]"></a>_fdb_db_path</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fdb.o(i._fdb_db_path))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter_by_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_append
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_control
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_control
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_del
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_finish
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_format_all
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_append
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect_by_free_size
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
</UL>

<P><STRONG><a name="[125]"></a>_fdb_flash_erase</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fdb_utils.o(i._fdb_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fdb_flash_erase &rArr; fal_partition_erase &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[124]"></a>_fdb_flash_read</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fdb_utils.o(i._fdb_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tsl
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_continue_ff_addr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_kv_addr
</UL>

<P><STRONG><a name="[128]"></a>_fdb_flash_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fdb_utils.o(i._fdb_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tsl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kv_hdr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[136]"></a>_fdb_get_status</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fdb_utils.o(i._fdb_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fdb_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tsl
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
</UL>

<P><STRONG><a name="[12a]"></a>_fdb_init_ex</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, fdb.o(i._fdb_init_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _fdb_init_ex &rArr; fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[12e]"></a>_fdb_init_finish</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fdb.o(i._fdb_init_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fdb_init_finish &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[135]"></a>_fdb_read_status</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fdb_utils.o(i._fdb_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _fdb_read_status &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
</UL>

<P><STRONG><a name="[137]"></a>_fdb_set_status</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fdb_utils.o(i._fdb_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _fdb_set_status
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[138]"></a>_fdb_write_status</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, fdb_utils.o(i._fdb_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_set_status
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tsl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kv_hdr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[116]"></a>bind_set</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uart_data.o(i.bind_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bind_set &rArr; LoRa_SendData &rArr; uart_send_byte_it &rArr; PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnixSecond
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>db_add_mac</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, db.o(i.db_add_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = db_add_mac &rArr; fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
</UL>

<P><STRONG><a name="[dd]"></a>db_append_log</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, db.o(i.db_append_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = db_append_log &rArr; fdb_tsl_append &rArr; tsl_append &rArr; update_sec_status &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_append
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
</UL>

<P><STRONG><a name="[155]"></a>db_delete_mac</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, db.o(i.db_delete_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = db_delete_mac &rArr; fdb_kv_del &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_del
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
</UL>

<P><STRONG><a name="[157]"></a>db_init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, db.o(i.db_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = db_init &rArr; fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_control
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_control
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsdb_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
</UL>

<P><STRONG><a name="[15d]"></a>db_manage_mac</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, db.o(i.db_manage_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = db_manage_mac &rArr; fdb_kv_get_blob &rArr; get_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
</UL>

<P><STRONG><a name="[15f]"></a>db_query_send</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, db.o(i.db_query_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = db_query_send &rArr; fdb_tsl_iter &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_Query_send_data
</UL>

<P><STRONG><a name="[de]"></a>db_set_current_tsl_status</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, db.o(i.db_set_current_tsl_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = db_set_current_tsl_status &rArr; fdb_tsl_iter_by_time &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter_by_time
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
</UL>

<P><STRONG><a name="[23]"></a>dhcp_arp_reply</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ch57xnet_dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xnet_dhcp.o(i.CH57xNET_DHCPStart)
</UL>
<P><STRONG><a name="[30]"></a>dhcp_callback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcp_data.o(i.dhcp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dhcp_callback &rArr; net_tcp_client_creat_socket &rArr; CH57xNET_SocketCreat &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_connect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_creat_socket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_close
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.StartTask01)
</UL>
<P><STRONG><a name="[bc]"></a>dhcp_callback1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp_data.o(i.dhcp_callback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = dhcp_callback1 &rArr; CH57xNET_CreatUdpSocket &rArr; CH57xNET_SocketCreat &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_CreatUdpSocket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
</UL>

<P><STRONG><a name="[22]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ch57xnet_dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xnet_dhcp.o(i.CH57xNET_DHCPStart)
</UL>
<P><STRONG><a name="[21]"></a>dhcp_fine_tmr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ch57xnet_dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPHandle
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xnet_dhcp.o(i.CH57xNET_DHCPStart)
</UL>
<P><STRONG><a name="[188]"></a>dhcp_release</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[171]"></a>dhcp_renew</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[78]"></a>dhcp_start</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPStart
</UL>

<P><STRONG><a name="[7b]"></a>dhcp_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ch57xnet_dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcp_stop &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPStop
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[183]"></a>dns_setserver</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ch57xnet_nds.o(i.dns_setserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dns_setserver
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[18f]"></a>etharp_arp_input</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[192]"></a>etharp_ip_input</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, etharp.o(i.etharp_ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = etharp_ip_input &rArr; update_arp_entry &rArr; find_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[42]"></a>etharp_output</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[16f]"></a>etharp_query</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipArpCheck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[a3]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelIPARPSend
</UL>

<P><STRONG><a name="[e7]"></a>etharp_tmr</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = etharp_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIPPeriodicHandle
</UL>

<P><STRONG><a name="[2e]"></a>ethernet_input</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.SetupNetif)
</UL>
<P><STRONG><a name="[2f]"></a>ethernetif_init</STRONG> (Thumb, 54 bytes, Stack size 520 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ethernetif_init &rArr; low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.SetupNetif)
</UL>
<P><STRONG><a name="[90]"></a>ethernetif_input</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_MainTask
</UL>

<P><STRONG><a name="[12d]"></a>fal_flash_device_find</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fal_flash.o(i.fal_flash_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fal_flash_device_find &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
</UL>

<P><STRONG><a name="[19c]"></a>fal_flash_init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, fal_flash.o(i.fal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fal_flash_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[12b]"></a>fal_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fal.o(i.fal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[126]"></a>fal_partition_erase</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fal_partition.o(i.fal_partition_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fal_partition_erase &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_erase
</UL>

<P><STRONG><a name="[12c]"></a>fal_partition_find</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fal_partition.o(i.fal_partition_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fal_partition_find &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
</UL>

<P><STRONG><a name="[19d]"></a>fal_partition_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fal_partition.o(i.fal_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fal_partition_init &rArr; fal_show_part_table &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[127]"></a>fal_partition_read</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, fal_partition.o(i.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>

<P><STRONG><a name="[129]"></a>fal_partition_write</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, fal_partition.o(i.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_device_find_by_part
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>

<P><STRONG><a name="[1a0]"></a>fal_show_part_table</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, fal_partition.o(i.fal_show_part_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fal_show_part_table &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[152]"></a>fdb_blob_make</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fdb_utils.o(i.fdb_blob_make))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_cb1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_by_time_cb
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_manage_mac
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_add_mac
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_append_log
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_all_data_cb
</UL>

<P><STRONG><a name="[1a1]"></a>fdb_blob_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fdb_utils.o(i.fdb_blob_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fdb_blob_read &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_cb1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_by_time_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_all_data_cb
</UL>

<P><STRONG><a name="[14e]"></a>fdb_calc_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fdb_utils.o(i.fdb_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fdb_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[156]"></a>fdb_kv_del</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fdb_kvdb.o(i.fdb_kv_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = fdb_kv_del &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_delete_mac
</UL>

<P><STRONG><a name="[15e]"></a>fdb_kv_get_blob</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fdb_kvdb.o(i.fdb_kv_get_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = fdb_kv_get_blob &rArr; get_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_manage_mac
</UL>

<P><STRONG><a name="[153]"></a>fdb_kv_set_blob</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fdb_kvdb.o(i.fdb_kv_set_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_add_mac
</UL>

<P><STRONG><a name="[132]"></a>fdb_kv_set_default</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, fdb_kvdb.o(i.fdb_kv_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
</UL>

<P><STRONG><a name="[158]"></a>fdb_kvdb_control</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, fdb_kvdb.o(i.fdb_kvdb_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fdb_kvdb_control &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_init
</UL>

<P><STRONG><a name="[159]"></a>fdb_kvdb_init</STRONG> (Thumb, 308 bytes, Stack size 80 bytes, fdb_kvdb.o(i.fdb_kvdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_finish
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_init
</UL>

<P><STRONG><a name="[15a]"></a>fdb_tsdb_control</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, fdb_tsdb.o(i.fdb_tsdb_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fdb_tsdb_control &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_init
</UL>

<P><STRONG><a name="[15b]"></a>fdb_tsdb_init</STRONG> (Thumb, 404 bytes, Stack size 136 bytes, fdb_tsdb.o(i.fdb_tsdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = fdb_tsdb_init &rArr; tsl_format_all &rArr; sector_iterator &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_finish
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_init_ex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_format_all
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_init
</UL>

<P><STRONG><a name="[154]"></a>fdb_tsl_append</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fdb_tsdb.o(i.fdb_tsl_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fdb_tsl_append &rArr; tsl_append &rArr; update_sec_status &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_append
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_append_log
</UL>

<P><STRONG><a name="[160]"></a>fdb_tsl_iter</STRONG> (Thumb, 240 bytes, Stack size 88 bytes, fdb_tsdb.o(i.fdb_tsl_iter))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fdb_tsl_iter &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tsl
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_tsl_addr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsdb_iterator
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_query_send
</UL>

<P><STRONG><a name="[161]"></a>fdb_tsl_iter_by_time</STRONG> (Thumb, 394 bytes, Stack size 128 bytes, fdb_tsdb.o(i.fdb_tsl_iter_by_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = fdb_tsl_iter_by_time &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_start_tsl_addr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tsl
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_current_tsl_status
</UL>

<P><STRONG><a name="[1aa]"></a>fdb_tsl_set_status</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, fdb_tsdb.o(i.fdb_tsl_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fdb_tsl_set_status &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_by_time_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
</UL>

<P><STRONG><a name="[1fd]"></a>fdb_tsl_to_blob</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fdb_tsdb.o(i.fdb_tsl_to_blob))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_cb1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_by_time_cb
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_all_data_cb
</UL>

<P><STRONG><a name="[31]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57x_sys.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[dc]"></a>get_rtc_tim_switch_sec</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timswitch.o(i.get_rtc_tim_switch_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_rtc_tim_switch_sec &rArr; GetUnixSecond &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnixSecond
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
</UL>

<P><STRONG><a name="[3a]"></a>get_time</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, db.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_time &rArr; GetUnixSecond &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnixSecond
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> db.o(i.db_init)
</UL>
<P><STRONG><a name="[166]"></a>htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(i.htonl))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[190]"></a>htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[1b7]"></a>icmp_dest_unreach</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1b9]"></a>icmp_input</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueryPingEnable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipUnreachPort
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1be]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[1bc]"></a>inet_chksum_pbuf</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[1c2]"></a>inet_chksum_pseudo</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[9f]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ip_addr.o(i.ip_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_addr_isbroadcast
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1c4]"></a>ip_frag</STRONG> (Thumb, 346 bytes, Stack size 88 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[197]"></a>ip_input</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[1c0]"></a>ip_output</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[1bf]"></a>ip_output_if</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[1ca]"></a>ip_route</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[1cb]"></a>key_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_init &rArr; GPIOB_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_ModeCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, db.o(i.lock))
<BR>[Address Reference Count : 1]<UL><LI> db.o(i.db_init)
</UL>
<P><STRONG><a name="[cd]"></a>log_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(i.log_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = log_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_Beat_server
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_updata_back_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_time_back_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_test_node_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_register_back_data
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_beat_back_data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_import_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_delete_data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_Query_send_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_Node_Query_data
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_delete_mac
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_append_log
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test_back_date
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_import_delete_date
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_all_data_cb
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_register_server
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_GetTime_server
</UL>

<P><STRONG><a name="[199]"></a>low_level_init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fd]"></a>lwip_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lwip_init &rArr; memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupNetif
</UL>

<P><STRONG><a name="[bd]"></a>mDelaymS</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ch57x_sys.o(i.mDelaymS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mDelaymS &rArr; mDelayuS
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelayuS
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>mDelayuS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ch57x_sys.o(i.mDelayuS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mDelayuS
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[75]"></a>mStopIfError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, udp_net.o(i.mStopIfError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mStopIfError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_CreatUdpSocket
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = main &rArr; DHCP_UDP_TCP_LINK_Init &rArr; CH57xNET_HandleGlobalInt &rArr; net_tcp_client_data &rArr; Hub_register_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time3_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time0_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITFlag
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_UnitModCfg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_ModeCfg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17f]"></a>mem_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>

<P><STRONG><a name="[1cf]"></a>mem_init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[189]"></a>mem_malloc</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[1e7]"></a>mem_realloc</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, mem.o(i.mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[fc]"></a>memp_free</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTimeWaiTCP
</UL>

<P><STRONG><a name="[1d0]"></a>memp_init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1e4]"></a>memp_malloc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memp.o(i.memp_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>

<P><STRONG><a name="[cb]"></a>mntohs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, send_tcp.o(i.mntohs))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_Beat_server
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test_back_date
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_import_delete_date
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_all_data_cb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yntohs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_register_server
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_GetTime_server
</UL>

<P><STRONG><a name="[cc]"></a>msg_send_packed</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, send_tcp.o(i.msg_send_packed))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_send
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_verify
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_Beat_server
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test_back_date
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_import_delete_date
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_not_upload_data_cb
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_all_data_cb
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_register_server
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_GetTime_server
</UL>

<P><STRONG><a name="[bb]"></a>net_dhcp_while</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, net_dhcp.o(i.net_dhcp_while))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = net_dhcp_while &rArr; CH57xNET_DHCPStart &rArr; dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPStop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPStart
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_UDP_TCP_LINK_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask01
</UL>

<P><STRONG><a name="[1d3]"></a>net_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, net_init.o(i.net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = net_init &rArr; CH57xNET_LibInit &rArr; CH57xNET_Init &rArr; SetupNetif &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDelaymS
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetExecute
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMacAddr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_LibInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>net_initkeeplive</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, net_init.o(i.net_initkeeplive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_initkeeplive
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_ConfigKeepLive
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_LibInit
</UL>

<P><STRONG><a name="[16c]"></a>net_tcp_client_close</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_tcp_client.o(i.net_tcp_client_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = net_tcp_client_close &rArr; CH57xNET_SocketClose &rArr; CloseTcpPCB &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketClose
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_callback
</UL>

<P><STRONG><a name="[106]"></a>net_tcp_client_connect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net_tcp_client.o(i.net_tcp_client_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = net_tcp_client_connect &rArr; CH57xNET_SocketConnect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketConnect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_callback
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask01
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_reconnect
</UL>

<P><STRONG><a name="[16d]"></a>net_tcp_client_creat_socket</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, net_tcp_client.o(i.net_tcp_client_creat_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = net_tcp_client_creat_socket &rArr; CH57xNET_SocketCreat &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketSetKeepLive
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_callback
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_reconnect
</UL>

<P><STRONG><a name="[83]"></a>net_tcp_client_data</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, net_tcp_client.o(i.net_tcp_client_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = net_tcp_client_data &rArr; Hub_register_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_register_server
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketRecvLen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketRecv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_HandleGlobalInt
</UL>

<P><STRONG><a name="[1e0]"></a>net_tcp_client_reconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_tcp_client.o(i.net_tcp_client_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = net_tcp_client_reconnect &rArr; net_tcp_client_creat_socket &rArr; CH57xNET_SocketCreat &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_connect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_creat_socket
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketClose
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_disconnected_back
</UL>

<P><STRONG><a name="[1db]"></a>net_tcp_client_send</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, net_tcp_client.o(i.net_tcp_client_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
</UL>

<P><STRONG><a name="[84]"></a>net_udp_socket_data</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, udp_net.o(i.net_udp_socket_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = net_udp_socket_data &rArr; CH57xNET_SocketRecv &rArr; tcp_recved_socket &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketRecvLen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketRecv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_HandleGlobalInt
</UL>

<P><STRONG><a name="[ff]"></a>netif_add</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupNetif
</UL>

<P><STRONG><a name="[1c6]"></a>netif_is_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(i.netif_is_up))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>

<P><STRONG><a name="[1e1]"></a>netif_set_addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[fe]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupNetif
</UL>

<P><STRONG><a name="[186]"></a>netif_set_down</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[169]"></a>netif_set_gw</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_set_gw
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[167]"></a>netif_set_ipaddr</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[168]"></a>netif_set_netmask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_set_netmask
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[16a]"></a>netif_set_up</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[e0]"></a>node_auto_link</STRONG> (Thumb, 2108 bytes, Stack size 16 bytes, lora_link.o(i.node_auto_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = node_auto_link &rArr; server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_import_delete_date
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net_Faild
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_import_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_batch_delete_data
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net_Success
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Delete_Link_Net
</UL>

<P><STRONG><a name="[9e]"></a>ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(i.ntohl))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[100]"></a>ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(i.ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRAWReceive
</UL>

<P><STRONG><a name="[b0]"></a>pbuf_alloc</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketUdpSendTo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdpSend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRawSend
</UL>

<P><STRONG><a name="[1c5]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[1e5]"></a>pbuf_chain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[216]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[1bd]"></a>pbuf_copy</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[18a]"></a>pbuf_copy_partial</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[b2]"></a>pbuf_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketUdpSendTo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdpSend
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdpReceive
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRawSend
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRAWReceive
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xSocketTCPReceive
</UL>

<P><STRONG><a name="[101]"></a>pbuf_header</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRAWReceive
</UL>

<P><STRONG><a name="[178]"></a>pbuf_realloc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1e6]"></a>pbuf_ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[b4]"></a>phy_change</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ch57xsock.o(i.phy_change))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_TimeIsr
</UL>

<P><STRONG><a name="[1fa]"></a>pvPortMalloc</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1f8]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[9a]"></a>raw_bind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, raw.o(i.raw_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
</UL>

<P><STRONG><a name="[9b]"></a>raw_connect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, raw.o(i.raw_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
</UL>

<P><STRONG><a name="[1c7]"></a>raw_input</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = raw_input
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[99]"></a>raw_new</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = raw_new
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
</UL>

<P><STRONG><a name="[9c]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
</UL>

<P><STRONG><a name="[b7]"></a>raw_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIPRAWConnect
</UL>

<P><STRONG><a name="[102]"></a>raw_send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketIPRawSend
</UL>

<P><STRONG><a name="[1fe]"></a>raw_sendto</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[11a]"></a>rbCanRead</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, looplist.o(i.rbCanRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rbCanRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanWrite
</UL>

<P><STRONG><a name="[200]"></a>rbCanWrite</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, looplist.o(i.rbCanWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rbCanWrite &rArr; rbCanRead
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
</UL>

<P><STRONG><a name="[1ff]"></a>rbCapacity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, looplist.o(i.rbCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanWrite
</UL>

<P><STRONG><a name="[233]"></a>rbCreate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, looplist.o(i.rbCreate))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11b]"></a>rbRead</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, looplist.o(i.rbRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = rbRead &rArr;  rbRead (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
</UL>

<P><STRONG><a name="[f4]"></a>rbWrite</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, looplist.o(i.rbWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCapacity
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanWrite
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbWrite
</UL>

<P><STRONG><a name="[3c]"></a>send_all_data_cb</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, send_tcp.o(i.send_all_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = send_all_data_cb &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_to_blob
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> db.o(i.db_query_send)
</UL>
<P><STRONG><a name="[3b]"></a>send_not_upload_data_cb</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, send_tcp.o(i.send_not_upload_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = send_not_upload_data_cb &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_to_blob
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_set_status
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> db.o(i.db_query_send)
</UL>
<P><STRONG><a name="[1e3]"></a>server_import_delete_date</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, send_tcp.o(i.server_import_delete_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
</UL>

<P><STRONG><a name="[202]"></a>server_test_back_date</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, send_tcp.o(i.server_test_back_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = server_test_back_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mntohs
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_server_test_node_data
</UL>

<P><STRONG><a name="[204]"></a>sfud_chip_erase</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, sfud.o(i.sfud_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sfud_chip_erase &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[1c3]"></a>sfud_device_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sfud.o(i.sfud_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sfud_device_init &rArr; hardware_init &rArr; sfud_write_status &rArr; set_write_enabled &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[18e]"></a>sfud_erase</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, sfud.o(i.sfud_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_address_byte_array
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[13e]"></a>sfud_log_debug</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sfud_port.o(i.sfud_log_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_address_byte_array
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[13f]"></a>sfud_log_info</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sfud_port.o(i.sfud_log_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sfud_log_info &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[201]"></a>sfud_read</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, sfud.o(i.sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sfud_read &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_address_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[203]"></a>sfud_read_status</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sfud.o(i.sfud_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>

<P><STRONG><a name="[1b2]"></a>sfud_spi_port_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sfud_port.o(i.sfud_spi_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sfud_spi_port_init &rArr; GPIOA_ModeCfg &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_ModeCfg
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MasterDefInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DataMode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_CLKCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[20a]"></a>sfud_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sfud.o(i.sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[1b5]"></a>sfud_write_status</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, sfud.o(i.sfud_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sfud_write_status &rArr; set_write_enabled &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[1da]"></a>sum_verify</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, send_tcp.o(i.sum_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sum_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send_packed
</UL>

<P><STRONG><a name="[b8]"></a>tcp_abandon</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipRemoveTcpPcb
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTcpPCB
</UL>

<P><STRONG><a name="[210]"></a>tcp_alloc</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
</UL>

<P><STRONG><a name="[a6]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
</UL>

<P><STRONG><a name="[a5]"></a>tcp_bind</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tcp_bind &rArr; tcp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
</UL>

<P><STRONG><a name="[98]"></a>tcp_close</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipRemoveTcpPcb
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketConnect
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTcpPCB
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xSocketTCPReceive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xScokedIntHandle
</UL>

<P><STRONG><a name="[97]"></a>tcp_connect</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketConnect
</UL>

<P><STRONG><a name="[40]"></a>tcp_connected_back</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, tcp_data.o(i.tcp_connected_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_connected_back &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_data.o(i.dhcp_callback)
</UL>
<P><STRONG><a name="[3f]"></a>tcp_disconnected_back</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tcp_data.o(i.tcp_disconnected_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_disconnected_back &rArr; net_tcp_client_reconnect &rArr; net_tcp_client_creat_socket &rArr; CH57xNET_SocketCreat &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_client_reconnect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_data.o(i.dhcp_callback)
</UL>
<P><STRONG><a name="[214]"></a>tcp_eff_send_mss</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[215]"></a>tcp_enqueue</STRONG> (Thumb, 970 bytes, Stack size 96 bytes, tcp_out.o(i.tcp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[a7]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
</UL>

<P><STRONG><a name="[217]"></a>tcp_fasttmr</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[1c9]"></a>tcp_input</STRONG> (Thumb, 956 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipRemoveTcpPcb
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xFileCorrectTCBPcb
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[21b]"></a>tcp_keepalive</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[a4]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
</UL>

<P><STRONG><a name="[211]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[103]"></a>tcp_output</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved_socket
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketTcpSend
</UL>

<P><STRONG><a name="[fb]"></a>tcp_pcb_purge</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveTimeWaiTCP
</UL>

<P><STRONG><a name="[20d]"></a>tcp_pcb_remove</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[ec]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipTcpConnectedCallBack
</UL>

<P><STRONG><a name="[ea]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipTcpConnectedCallBack
</UL>

<P><STRONG><a name="[3e]"></a>tcp_recv_back</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, tcp_data.o(i.tcp_recv_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = tcp_recv_back &rArr; TCP_recv_date_handle &rArr; tcp_recv_server_time_back_data &rArr; db_init &rArr; fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_data.o(i.dhcp_callback)
</UL>
<P><STRONG><a name="[52]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[10f]"></a>tcp_recv_server_Node_Query_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp_data_handle.o(i.tcp_recv_server_Node_Query_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_recv_server_Node_Query_data &rArr; log_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[113]"></a>tcp_recv_server_Query_send_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp_data_handle.o(i.tcp_recv_server_Query_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tcp_recv_server_Query_send_data &rArr; db_query_send &rArr; fdb_tsl_iter &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_query_send
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[111]"></a>tcp_recv_server_batch_delete_data</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tcp_data_handle.o(i.tcp_recv_server_batch_delete_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_recv_server_batch_delete_data &rArr; node_auto_link &rArr; server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[110]"></a>tcp_recv_server_batch_import_data</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tcp_data_handle.o(i.tcp_recv_server_batch_import_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_recv_server_batch_import_data &rArr; node_auto_link &rArr; server_import_delete_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[10e]"></a>tcp_recv_server_beat_back_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tcp_data_handle.o(i.tcp_recv_server_beat_back_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_recv_server_beat_back_data &rArr; log_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[10c]"></a>tcp_recv_server_register_back_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp_data_handle.o(i.tcp_recv_server_register_back_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tcp_recv_server_register_back_data &rArr; Hub_GetTime_server &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_GetTime_server
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[112]"></a>tcp_recv_server_test_node_data</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_data_handle.o(i.tcp_recv_server_test_node_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_recv_server_test_node_data &rArr; server_test_back_date &rArr; msg_send_packed &rArr; net_tcp_client_send &rArr; CH57xNET_SocketSend &rArr; SocketTcpSend &rArr; CH57xNET_MainTask &rArr; LwIPPeriodicHandle &rArr; tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_test_back_date
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[10d]"></a>tcp_recv_server_time_back_data</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tcp_data_handle.o(i.tcp_recv_server_time_back_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = tcp_recv_server_time_back_data &rArr; db_init &rArr; fdb_kvdb_init &rArr; _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDateTimeFromUnixSecond
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Int
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_query_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_InitTime
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[114]"></a>tcp_recv_server_updata_back_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tcp_data_handle.o(i.tcp_recv_server_updata_back_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_recv_server_updata_back_data &rArr; log_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_recv_date_handle
</UL>

<P><STRONG><a name="[227]"></a>tcp_recved</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[b6]"></a>tcp_recved_CH57x</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ch57xsock.o(i.tcp_recved_CH57x))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_recved_CH57x &rArr; tcp_update_rcv_ann_wnd
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xSocketTCPReceive
</UL>

<P><STRONG><a name="[aa]"></a>tcp_recved_socket</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ch57xsock.o(i.tcp_recved_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = tcp_recved_socket &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketRecv
</UL>

<P><STRONG><a name="[223]"></a>tcp_rexmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</UL>

<P><STRONG><a name="[224]"></a>tcp_rexmit_fast</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[228]"></a>tcp_rexmit_rto</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[20f]"></a>tcp_rst</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[226]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_seg_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[21f]"></a>tcp_seg_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[20e]"></a>tcp_segs_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[213]"></a>tcp_send_ctrl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tcp_send_ctrl &rArr; tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[220]"></a>tcp_send_empty_ack</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[eb]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipTcpConnectedCallBack
</UL>

<P><STRONG><a name="[229]"></a>tcp_slowtmr</STRONG> (Thumb, 608 bytes, Stack size 64 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwipRemoveTcpPcb
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[e6]"></a>tcp_tmr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_tmr &rArr; tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIPPeriodicHandle
</UL>

<P><STRONG><a name="[225]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved_socket
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved_CH57x
</UL>

<P><STRONG><a name="[104]"></a>tcp_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tcp_write &rArr; tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketTcpSend
</UL>

<P><STRONG><a name="[22a]"></a>tcp_zero_window_probe</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[1d4]"></a>time0_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, time.o(i.time0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_TimerInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d5]"></a>time1_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, time.o(i.time1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = time1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_TimerInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>time3_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, time.o(i.time3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = time3_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_TimerInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>tsdb_iterator</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, db.o(i.tsdb_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tsdb_iterator &rArr; fdb_tsl_iter &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_init
</UL>

<P><STRONG><a name="[108]"></a>uart_data</STRONG> (Thumb, 1566 bytes, Stack size 16 bytes, uart_data.o(i.uart_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = uart_data &rArr; db_add_mac &rArr; fdb_kv_set_blob &rArr; set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbRead
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCanRead
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_manage_mac
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_delete_mac
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_add_mac
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net_Success
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Delete_Link_Net
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_import_delete_date
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Data_Upload_Server
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>

<P><STRONG><a name="[1d2]"></a>uart_init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart_init &rArr; UART3_DefInit &rArr; UART3_BaudRateCfg &rArr; GetSysClock &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbCreate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_INTCfg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_DefInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTCfg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_DefInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRemap
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_ModeCfg
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_ModeCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>uart_send_byte_it</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart.o(i.uart_send_byte_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_send_byte_it &rArr; PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_INTCfg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_INTCfg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[a0]"></a>udp_bind</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[a1]"></a>udp_connect</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[1c8]"></a>udp_input</STRONG> (Thumb, 538 bytes, Stack size 64 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[9d]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[a2]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketCreat
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[b9]"></a>udp_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUpdConnect
</UL>

<P><STRONG><a name="[105]"></a>udp_send</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdpSend
</UL>

<P><STRONG><a name="[b1]"></a>udp_sendto</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_SocketUdpSendTo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[179]"></a>udp_sendto_if</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[117]"></a>unbind_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart_data.o(i.unbind_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = unbind_set &rArr; LoRa_SendData &rArr; uart_send_byte_it &rArr; PutData &rArr; rbWrite &rArr;  rbWrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
</UL>

<P><STRONG><a name="[39]"></a>unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, db.o(i.unlock))
<BR>[Address Reference Count : 1]<UL><LI> db.o(i.db_init)
</UL>
<P><STRONG><a name="[1e9]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1f9]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1f7]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1eb]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1ea]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1ed]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1ef]"></a>vPortExitCritical</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1f5]"></a>vPortFree</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1f0]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[107]"></a>vTaskDelay</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask01
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_auto_link
</UL>

<P><STRONG><a name="[ef]"></a>vTaskStartScheduler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1f2]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[5a]"></a>vTaskSwitchContext</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[236]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[10a]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ee]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[109]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[23a]"></a>xTaskIncrementTick</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f3]"></a>xTaskResumeAll</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[235]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[115]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
</UL>

<P><STRONG><a name="[22c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time0_init
</UL>

<P><STRONG><a name="[22e]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, time.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time3_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
</UL>

<P><STRONG><a name="[232]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_data.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data
</UL>

<P><STRONG><a name="[e5]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lora_link.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Link_Net_Start
</UL>

<P><STRONG><a name="[3d]"></a>query_by_time_cb</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, db.o(i.query_by_time_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = query_by_time_cb &rArr; fdb_tsl_set_status &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_to_blob
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_set_status
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> db.o(i.db_set_current_tsl_status)
</UL>
<P><STRONG><a name="[53]"></a>query_cb1</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, db.o(i.query_cb1))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = query_cb1 &rArr; fdb_blob_read &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_to_blob
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_blob_make
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yntohs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> db.o(i.tsdb_iterator)
</UL>
<P><STRONG><a name="[1e8]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1ec]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1f1]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1f4]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[55]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1f6]"></a>prvInitialiseNewTask</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1ee]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[23c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1fb]"></a>prvHeapInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1fc]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[237]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4e]"></a>prvTaskExitError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[13d]"></a>aai_write</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, sfud.o(i.aai_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = aai_write &rArr; page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_address_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[1b1]"></a>hardware_init</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, sfud.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hardware_init &rArr; sfud_write_status &rArr; set_write_enabled &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[142]"></a>make_address_byte_array</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, sfud.o(i.make_address_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = make_address_byte_array &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[140]"></a>page256_or_1_byte_write</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, sfud.o(i.page256_or_1_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_address_byte_array
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[1b3]"></a>read_jedec_id</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, sfud.o(i.read_jedec_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_jedec_id &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[1b4]"></a>reset</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sfud.o(i.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = reset &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[1b6]"></a>set_4_byte_address_mode</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sfud.o(i.set_4_byte_address_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = set_4_byte_address_mode &rArr; set_write_enabled &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[141]"></a>set_write_enabled</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, sfud.o(i.set_write_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_write_enabled &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[205]"></a>software_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sfud.o(i.software_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = software_init &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[143]"></a>wait_busy</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sfud.o(i.wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[50]"></a>spi_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfud_port.o(i.spi_lock))
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[51]"></a>spi_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfud_port.o(i.spi_unlock))
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[4f]"></a>spi_write_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sfud_port.o(i.spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_write_read &rArr; SPI1_MasterTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MasterTrans
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_MasterRecv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[130]"></a>_fdb_kv_load</STRONG> (Thumb, 208 bytes, Stack size 144 bytes, fdb_kvdb.o(i._fdb_kv_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = _fdb_kv_load &rArr; fdb_kv_set_default &rArr; create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
</UL>

<P><STRONG><a name="[144]"></a>align_write</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, fdb_kvdb.o(i.align_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = align_write &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[145]"></a>alloc_kv</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, fdb_kvdb.o(i.alloc_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = alloc_kv &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>

<P><STRONG><a name="[37]"></a>alloc_kv_cb</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, fdb_kvdb.o(i.alloc_kv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = alloc_kv_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.alloc_kv)
</UL>
<P><STRONG><a name="[34]"></a>check_and_recovery_gc_cb</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fdb_kvdb.o(i.check_and_recovery_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = check_and_recovery_gc_cb &rArr; gc_collect &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i._fdb_kv_load)
</UL>
<P><STRONG><a name="[35]"></a>check_and_recovery_kv_cb</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, fdb_kvdb.o(i.check_and_recovery_kv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = check_and_recovery_kv_cb &rArr; move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i._fdb_kv_load)
</UL>
<P><STRONG><a name="[44]"></a>check_oldest_addr_cb</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, fdb_kvdb.o(i.check_oldest_addr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_oldest_addr_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.fdb_kvdb_init)
</UL>
<P><STRONG><a name="[33]"></a>check_sec_hdr_cb</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, fdb_kvdb.o(i.check_sec_hdr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = check_sec_hdr_cb &rArr; format_sector &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i._fdb_kv_load)
</UL>
<P><STRONG><a name="[14a]"></a>create_kv_blob</STRONG> (Thumb, 638 bytes, Stack size 80 bytes, fdb_kvdb.o(i.create_kv_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = create_kv_blob &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_kv_hdr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
</UL>

<P><STRONG><a name="[162]"></a>del_kv</STRONG> (Thumb, 266 bytes, Stack size 144 bytes, fdb_kvdb.o(i.del_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_read_status
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_del
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
</UL>

<P><STRONG><a name="[4c]"></a>do_gc</STRONG> (Thumb, 274 bytes, Stack size 120 bytes, fdb_kvdb.o(i.do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = do_gc &rArr; move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.gc_collect_by_free_size)
</UL>
<P><STRONG><a name="[163]"></a>find_kv</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fdb_kvdb.o(i.find_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv_from_cache
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
</UL>

<P><STRONG><a name="[4a]"></a>find_kv_cb</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, fdb_kvdb.o(i.find_kv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = find_kv_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.find_kv_no_cache)
</UL>
<P><STRONG><a name="[1ac]"></a>find_kv_no_cache</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fdb_kvdb.o(i.find_kv_no_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>

<P><STRONG><a name="[1ad]"></a>find_next_kv_addr</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, fdb_kvdb.o(i.find_next_kv_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = find_next_kv_addr &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
</UL>

<P><STRONG><a name="[149]"></a>format_sector</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, fdb_kvdb.o(i.format_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = format_sector &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_set_status
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_erase
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_default
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
</UL>

<P><STRONG><a name="[4b]"></a>gc_check_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fdb_kvdb.o(i.gc_check_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_check_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.gc_collect_by_free_size)
</UL>
<P><STRONG><a name="[134]"></a>gc_collect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fdb_kvdb.o(i.gc_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = gc_collect &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect_by_free_size
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_gc_cb
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
</UL>

<P><STRONG><a name="[1b0]"></a>gc_collect_by_free_size</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, fdb_kvdb.o(i.gc_collect_by_free_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>

<P><STRONG><a name="[1a2]"></a>get_kv</STRONG> (Thumb, 78 bytes, Stack size 128 bytes, fdb_kvdb.o(i.get_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = get_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_get_blob
</UL>

<P><STRONG><a name="[1ab]"></a>get_kv_from_cache</STRONG> (Thumb, 190 bytes, Stack size 104 bytes, fdb_kvdb.o(i.get_kv_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_kv_from_cache &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
</UL>

<P><STRONG><a name="[18c]"></a>get_next_kv_addr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, fdb_kvdb.o(i.get_next_kv_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_next_kv_addr &rArr; find_next_kv_addr &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_kv_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[18d]"></a>get_next_sector_addr</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, fdb_kvdb.o(i.get_next_sector_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[1ae]"></a>get_sector_from_cache</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, fdb_kvdb.o(i.get_sector_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_kv_addr
</UL>

<P><STRONG><a name="[133]"></a>kv_iterator</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, fdb_kvdb.o(i.kv_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
</UL>

<P><STRONG><a name="[146]"></a>move_kv</STRONG> (Thumb, 390 bytes, Stack size 208 bytes, fdb_kvdb.o(i.move_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = move_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kv_cache
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv_no_cache
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[14c]"></a>new_kv</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, fdb_kvdb.o(i.new_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect_by_free_size
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv_ex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[1e2]"></a>new_kv_ex</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fdb_kvdb.o(i.new_kv_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = new_kv_ex &rArr; new_kv &rArr; gc_collect_by_free_size &rArr; sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_kv
</UL>

<P><STRONG><a name="[18b]"></a>read_kv</STRONG> (Thumb, 452 bytes, Stack size 104 bytes, fdb_kvdb.o(i.read_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[1cc]"></a>read_sector_info</STRONG> (Thumb, 426 bytes, Stack size 144 bytes, fdb_kvdb.o(i.read_sector_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_continue_ff_addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_kv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_kv_addr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kv_iterator
</UL>

<P><STRONG><a name="[131]"></a>sector_iterator</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, fdb_kvdb.o(i.sector_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sector_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kvdb_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect_by_free_size
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_kv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_kv_load
</UL>

<P><STRONG><a name="[36]"></a>sector_statistics_cb</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, fdb_kvdb.o(i.sector_statistics_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sector_statistics_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_kvdb.o(i.alloc_kv)
</UL>
<P><STRONG><a name="[1a3]"></a>set_kv</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, fdb_kvdb.o(i.set_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = set_kv &rArr; del_kv &rArr; find_kv &rArr; find_kv_no_cache &rArr; kv_iterator &rArr; read_sector_info &rArr; read_kv &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_kv_ex
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect_by_free_size
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_kv_set_blob
</UL>

<P><STRONG><a name="[147]"></a>update_kv_cache</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, fdb_kvdb.o(i.update_kv_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = update_kv_cache &rArr; fdb_calc_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_kv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_kv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_kv_cb
</UL>

<P><STRONG><a name="[14d]"></a>update_sec_status</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, fdb_kvdb.o(i.update_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = update_sec_status &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[150]"></a>update_sector_cache</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, fdb_kvdb.o(i.update_sector_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_kv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[14f]"></a>write_kv_hdr</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, fdb_kvdb.o(i.write_kv_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = write_kv_hdr &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_kv_blob
</UL>

<P><STRONG><a name="[45]"></a>check_sec_hdr_cb</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fdb_tsdb.o(i.check_sec_hdr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_sec_hdr_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_tsdb.o(i.fdb_tsdb_init)
</UL>
<P><STRONG><a name="[54]"></a>format_all_cb</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, fdb_tsdb.o(i.format_all_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = format_all_cb &rArr; format_sector &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_tsdb.o(i.tsl_format_all)
</UL>
<P><STRONG><a name="[1af]"></a>format_sector</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, fdb_tsdb.o(i.format_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = format_sector &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_erase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_all_cb
</UL>

<P><STRONG><a name="[48]"></a>get_last_sector_addr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fdb_tsdb.o(i.get_last_sector_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_last_sector_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_tsdb.o(i.fdb_tsl_iter_by_time)
</UL>
<P><STRONG><a name="[49]"></a>get_last_tsl_addr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fdb_tsdb.o(i.get_last_tsl_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_last_tsl_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_tsdb.o(i.fdb_tsl_iter_by_time)
</UL>
<P><STRONG><a name="[46]"></a>get_next_sector_addr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fdb_tsdb.o(i.get_next_sector_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_tsdb.o(i.fdb_tsl_iter_by_time)
</UL>
<P><STRONG><a name="[47]"></a>get_next_tsl_addr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fdb_tsdb.o(i.get_next_tsl_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_next_tsl_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb_tsdb.o(i.fdb_tsl_iter_by_time)
</UL>
<P><STRONG><a name="[1a6]"></a>read_sector_info</STRONG> (Thumb, 376 bytes, Stack size 88 bytes, fdb_tsdb.o(i.read_sector_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tsl
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter_by_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_format_all
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>

<P><STRONG><a name="[1a8]"></a>read_tsl</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, fdb_tsdb.o(i.read_tsl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_get_status
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter_by_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_start_tsl_addr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
</UL>

<P><STRONG><a name="[1a9]"></a>search_start_tsl_addr</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, fdb_tsdb.o(i.search_start_tsl_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = search_start_tsl_addr &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tsl
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_iter_by_time
</UL>

<P><STRONG><a name="[1a4]"></a>sector_iterator</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, fdb_tsdb.o(i.sector_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sector_iterator &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_format_all
</UL>

<P><STRONG><a name="[1a7]"></a>tsl_append</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, fdb_tsdb.o(i.tsl_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tsl_append &rArr; update_sec_status &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tsl
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsl_append
</UL>

<P><STRONG><a name="[1a5]"></a>tsl_format_all</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, fdb_tsdb.o(i.tsl_format_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tsl_format_all &rArr; sector_iterator &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_db_path
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_tsdb_init
</UL>

<P><STRONG><a name="[230]"></a>update_sec_status</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, fdb_tsdb.o(i.update_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = update_sec_status &rArr; read_sector_info &rArr; read_tsl &rArr; _fdb_flash_read &rArr; fal_partition_read &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_info
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_append
</UL>

<P><STRONG><a name="[231]"></a>write_tsl</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, fdb_tsdb.o(i.write_tsl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = write_tsl &rArr; _fdb_write_status &rArr; _fdb_flash_write &rArr; fal_partition_write &rArr; flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_write_status
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdb_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_append
</UL>

<P><STRONG><a name="[3]"></a>erase</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = erase &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fal_flash_sfud_port.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = init &rArr; sfud_device_init &rArr; hardware_init &rArr; sfud_write_status &rArr; set_write_enabled &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>read</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = read &rArr; sfud_read &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>write</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; wait_busy &rArr; sfud_read_status &rArr; sfud_log_debug &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[148]"></a>check_and_update_part_cache</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, fal_partition.o(i.check_and_update_part_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = check_and_update_part_cache &rArr; fal_flash_device_find &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[19e]"></a>flash_device_find_by_part</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fal_partition.o(i.flash_device_find_by_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_device_find_by_part &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>

<P><STRONG><a name="[165]"></a>dhcp_bind</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, ch57xnet_dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH57xNET_DHCPHandle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[16e]"></a>dhcp_check</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ch57xnet_dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[172]"></a>dhcp_create_request</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = dhcp_create_request &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[164]"></a>dhcp_decline</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_mac
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[17a]"></a>dhcp_delete_request</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ch57xnet_dhcp.o(i.dhcp_delete_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dhcp_delete_request &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[17b]"></a>dhcp_discover</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[17e]"></a>dhcp_free_reply</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ch57xnet_dhcp.o(i.dhcp_free_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[182]"></a>dhcp_get_option_long</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch57xnet_dhcp.o(i.dhcp_get_option_long))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[181]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ch57xnet_dhcp.o(i.dhcp_get_option_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_get_option_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[180]"></a>dhcp_handle_ack</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_handle_ack &rArr; dns_setserver
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[173]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ch57xnet_dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[174]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ch57xnet_dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[175]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ch57xnet_dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[176]"></a>dhcp_option_mac</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ch57xnet_dhcp.o(i.dhcp_option_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[17c]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ch57xnet_dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[177]"></a>dhcp_option_trailer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ch57xnet_dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[170]"></a>dhcp_rebind</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[184]"></a>dhcp_reboot</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[41]"></a>dhcp_recv</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch57xnet_dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[187]"></a>dhcp_select</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[16b]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch57xnet_dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[17d]"></a>dhcp_timeout</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ch57xnet_dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[185]"></a>dhcp_unfold_reply</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ch57xnet_dhcp.o(i.dhcp_unfold_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dhcp_unfold_reply &rArr; pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[1d8]"></a>plug_holes</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[212]"></a>tcp_new_port</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[221]"></a>tcp_output_segment</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[21c]"></a>tcp_output_set_header</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_set_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_output_set_header
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[196]"></a>etharp_raw</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[193]"></a>etharp_send_ip</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[194]"></a>find_entry</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, etharp.o(i.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = find_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[191]"></a>update_arp_entry</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, etharp.o(i.update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = update_arp_entry &rArr; find_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPConflictHandle
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[19a]"></a>low_level_input</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHRec
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[43]"></a>low_level_output</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = low_level_output &rArr; ETHSend
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHSend
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[219]"></a>tcp_listen_input</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[21e]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[21d]"></a>tcp_parseopt</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[21a]"></a>tcp_process</STRONG> (Thumb, 808 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tcp_process &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[222]"></a>tcp_receive</STRONG> (Thumb, 1830 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_receive &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[218]"></a>tcp_timewait_input</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[1b8]"></a>icmp_send_response</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[1c1]"></a>lwip_standard_chksum</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[139]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[121]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[13c]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
